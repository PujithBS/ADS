#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

typedef struct node {
    int item;
    struct node *link;
} node;

node *head, *tail;

node *xor(node *a, node *b)
{
    return (node*) ((uintptr_t) a ^ (uintptr_t) b);
}

void insert(int item, bool at_tail)
{
    node *ptr = (node*) malloc(sizeof(node));
    ptr->item = item;

    if (NULL == head) {
        ptr->link = NULL;
        head = tail = ptr;
    } else if (at_tail) {
        ptr->link = xor(tail, NULL);
        tail->link = xor(ptr, xor(tail->link, NULL));
        tail = ptr;
    } else {
        ptr->link = xor(NULL, head);
        head->link = xor(ptr, xor(NULL, head->link));
        head = ptr;
    }
}

int delete(bool from_tail)
{
    int item;
    node *ptr;
    if (NULL == head) {
        printf("Empty list.\n");
        exit(1);
    } else if (from_tail) {
        ptr = tail;
        item = ptr->item;
        node *prev = xor(ptr->link, NULL);
        if (NULL == prev) head = NULL;
        else prev->link= xor(ptr, xor(prev->link, NULL));
        tail = prev;

    } else {
        ptr = head;
        item = ptr->item;
        node *next = xor(NULL, ptr->link);
        if (NULL == next) tail = NULL;
        else next->link = xor(ptr, xor(NULL, next->link));
        head = next;
    }
    free(ptr);
    ptr = NULL;
    return item;
}

void display()
{
    node *curr = head;
    node *prev = NULL, *next;

    printf("\nList elements are : ");
    while (NULL != curr) {
        printf("%d ", curr->item);
        next = xor(prev, curr->link);
        prev = curr;
        curr = next;
    }

    printf("\n");
}

int main(int argc, char *argv[])
{
    int item;
    for (int i = 1; i <= 10; i++){
        insert(i, i < 6);
        printf("Successfully inserted %d\n",i);
    }

    display();
    printf("\n");
    for (int i = 1; i <= 4; i++){
        item=delete(i < 3);
        printf("Successfully deleted %d\n",item);
    }

    display();
}
